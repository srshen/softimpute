??zoo
?zoo
install.packages("forecast")
forecast
library(forecast)
R --version
info()
sessionInfo()
updateR()
library(installr)
install.packages("installr")
library(devtools)
setwd("/users/ryan/Desktop/test")
library(jpeg)
img = readJPEG("./lenna.jpg")  ##input a grayscale image as a matrix
##if(length(dim(img)>2)) img = img[,,1]  ##some picture need this.
num_rdn = 0.4*ncol(img)*nrow(img)  ##number of random missing
set.seed(2016000100)
x_rdn = sample.int(n=nrow(img), size=num_rdn,replace = TRUE)
y_rdn = sample.int(n=ncol(img), size=num_rdn,replace = TRUE)
img_rdn = img
for(i in 1:num_rdn){
img_rdn[x_rdn[i],y_rdn[i]] = NA
}     ##randomly miss
P_Omega = matrix(0,nrow(img_rdn),ncol(img_rdn))
for(i in 1:nrow(img_rdn)){
for(j in 1:ncol(img_rdn)){
if(!is.na(img_rdn[i,j])) P_Omega[i,j] = 1
}
Rcpp::sourceCpp("softimpute.cpp")
zz = softimpute(img_rdn, P_Omega, 0.5)
cx
a
http://118.244.232.195/wiki/images/5/59/Missing_data_presentation%28Shen.shirun%29.pdf
http://118.244.232.195/wiki/images/5/59/Missing_data_presentation%28Shen.shirun%29.pdf
source('~/Desktop/test/softimpute.R')
Rcpp::sourceCpp("softimpute.cpp")
zz = softimpute(img_rdn, P_Omega, 0.5)
Rcpp::sourceCpp('softimpute.cpp')
zz = softimpute(img_rdn, P_Omega, 0.5)
plot(0,0, type="n")
rasterImage(zz, -1,-1,1,1)
Rcpp::sourceCpp('softimpute.cpp')
source('~/Desktop/test/softimpute.R')
plot(0,0, type="n")
rasterImage(zz$Z, -1,-1,1,1)
zz$num_iteration
Rcpp::sourceCpp('softimpute.cpp')
zz = softimpute(img_rdn, P_Omega, 0.5)
zz$num_iteration
Rcpp::sourceCpp('softimpute.cpp')
zz = softimpute(img_rdn, P_Omega, 0.5)
zz$num_iteration
Rcpp::sourceCpp('softimpute.cpp')
zz = softimpute(img_rdn, P_Omega, 0.5)
zz$num_iteration
Rcpp::sourceCpp('softimpute.cpp')
zz = softimpute(img_rdn, P_Omega, 0.5)
zz$num_iteration
knitr::opts_chunk$set(echo = TRUE)
setwd("/users/ryan/Desktop/test")
library(jpeg)
img = readJPEG("./lenna.jpg")  ##input a grayscale image as a matrix
par(mar = c(1,1,2,2))
plot(0,0,type = "n")
rasterImage(img, -1, -1, 1, 1)
num_rdn = 0.4*ncol(img)*nrow(img)  ##number of random missing
set.seed(2016000100) #random seed
x_rdn = sample.int(n=nrow(img), size=num_rdn,replace = TRUE)
y_rdn = sample.int(n=ncol(img), size=num_rdn,replace = TRUE)
img_rdn = img
for(i in 1:num_rdn){
img_rdn[x_rdn[i],y_rdn[i]] = NA
}     ##randomly miss
par(mar = c(0,0,0,0))
plot(0,0,type="n")
rasterImage(img_rdn,-1,-1,1,1)
knitr::opts_chunk$set(echo = TRUE)
setwd("/users/ryan/Desktop/test")
library(jpeg)
img = readJPEG("./lenna.jpg")  ##input a grayscale image as a matrix
par(mar = c(1,1,2,2))
plot(0,0,type = "n")
rasterImage(img, -1, -1, 1, 1)
num_rdn = 0.4*ncol(img)*nrow(img)  ##number of random missing
set.seed(2016000100) #random seed
x_rdn = sample.int(n=nrow(img), size=num_rdn,replace = TRUE)
y_rdn = sample.int(n=ncol(img), size=num_rdn,replace = TRUE)
img_rdn = img
for(i in 1:num_rdn){
img_rdn[x_rdn[i],y_rdn[i]] = NA
}     ##randomly miss
par(mar = c(0,0,0,0))
plot(0,0,type="n")
rasterImage(img_rdn,-1,-1,1,1)
setwd("/users/ryan/Desktop/test")
library(jpeg)
img = readJPEG("./lenna.jpg")  ##input a grayscale image as a matrix
par(mar = c(0,0,2,2))
plot(0,0,type = "n")
rasterImage(img, -1, -1, 1, 1)
setwd("/users/ryan/Desktop/test")
library(jpeg)
img = readJPEG("./lenna.jpg")  ##input a grayscale image as a matrix
par(mar = c(0,0,4,4))
plot(0,0,type = "n")
rasterImage(img, -1, -1, 1, 1)
setwd("/users/ryan/Desktop/test")
library(jpeg)
img = readJPEG("./lenna.jpg")  ##input a grayscale image as a matrix
par(mar = c(0,0,5,5))
plot(0,0,type = "n")
rasterImage(img, -1, -1, 1, 1)
setwd("/users/ryan/Desktop/test")
library(jpeg)
img = readJPEG("./lenna.jpg")  ##input a grayscale image as a matrix
par(mar = c(0,0,0,0))
plot(0,0,type = "n")
rasterImage(img, -1, -1, 1, 1)
setwd("/users/ryan/Desktop/test")
library(jpeg)
img = readJPEG("./lenna.jpg")  ##input a grayscale image as a matrix
par(mar = c(0,0,0,0),oma = c(0,0,1,1))
plot(0,0,type = "n")
rasterImage(img, -1, -1, 1, 1)
setwd("/users/ryan/Desktop/test")
library(jpeg)
img = readJPEG("./lenna.jpg")  ##input a grayscale image as a matrix
par(mar = c(0,0,0,0),oma = c(0,0,2,1))
plot(0,0,type = "n")
rasterImage(img, -1, -1, 1, 1)
setwd("/users/ryan/Desktop/test")
library(jpeg)
img = readJPEG("./lenna.jpg")  ##input a grayscale image as a matrix
par(mar = c(0,0,0,0),oma = c(0,0,2,1))
plot(0,0,type = "n")
rasterImage(img, -1, -1, 1, 1)
setwd("/users/ryan/Desktop/test")
library(jpeg)
img = readJPEG("./lenna.jpg")  ##input a grayscale image as a matrix
par(mar = c(0,0,0,0),oma = c(0,0,2,2))
plot(0,0,type = "n")
rasterImage(img, -1, -1, 1, 1)
setwd("/users/ryan/Desktop/test")
library(jpeg)
img = readJPEG("./lenna.jpg")  ##input a grayscale image as a matrix
par(mar = c(0,0,0,0),omi = c(0,0,1,1))
plot(0,0,type = "n")
rasterImage(img, -1, -1, 1, 1)
setwd("/users/ryan/Desktop/test")
library(jpeg)
img = readJPEG("./lenna.jpg")  ##input a grayscale image as a matrix
par(mar = c(0,0,0,0),omi = c(0,0,2,1))
plot(0,0,type = "n")
rasterImage(img, -1, -1, 1, 1)
setwd("/users/ryan/Desktop/test")
library(jpeg)
img = readJPEG("./lenna.jpg")  ##input a grayscale image as a matrix
par(mar = c(0,0,0,0),omi = c(0,0,1,2))
plot(0,0,type = "n")
rasterImage(img, -1, -1, 1, 1)
setwd("/users/ryan/Desktop/test")
library(jpeg)
img = readJPEG("./lenna.jpg")  ##input a grayscale image as a matrix
par(mar = c(0,0,0,0),omi = c(0,0,1,3))
plot(0,0,type = "n")
rasterImage(img, -1, -1, 1, 1)
setwd("/users/ryan/Desktop/test")
library(jpeg)
img = readJPEG("./lenna.jpg")  ##input a grayscale image as a matrix
par(mar = c(0,0,0,0),omi = c(0,0,3,6))
plot(0,0,type = "n")
rasterImage(img, -1, -1, 1, 1)
setwd("/users/ryan/Desktop/test")
library(jpeg)
img = readJPEG("./lenna.jpg")  ##input a grayscale image as a matrix
par(mar = c(0,0,0,0),omi = c(0,0,2,4))
plot(0,0,type = "n")
rasterImage(img, -1, -1, 1, 1)
setwd("/users/ryan/Desktop/test")
library(jpeg)
img = readJPEG("./lenna.jpg")  ##input a grayscale image as a matrix
par(mar = c(0,0,0,0),omi = c(0,0,1,2))
plot(0,0,type = "n")
rasterImage(img, -1, -1, 1, 1)
RcppArmadillo::RcppArmadillo.package.skeleton("mndensity")
RcppArmadillo::RcppArmadillo.package.skeleton("softimpute")
Rcpp::compileAttributes()
system("cd softimpute")
Rcpp::compileAttributes()
getwd()
setwd("./softimpute")
Rcpp::compileAttributes()
R CMD build mndensity
q()
