// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// cutoff
arma::vec cutoff(arma::vec& s_cu, const double& lam_cu);
RcppExport SEXP _softimpute_cutoff(SEXP s_cuSEXP, SEXP lam_cuSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec& >::type s_cu(s_cuSEXP);
    Rcpp::traits::input_parameter< const double& >::type lam_cu(lam_cuSEXP);
    rcpp_result_gen = Rcpp::wrap(cutoff(s_cu, lam_cu));
    return rcpp_result_gen;
END_RCPP
}
// S_lambda
arma::mat S_lambda(const arma::mat& X_sl, const double& lam_sl);
RcppExport SEXP _softimpute_S_lambda(SEXP X_slSEXP, SEXP lam_slSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type X_sl(X_slSEXP);
    Rcpp::traits::input_parameter< const double& >::type lam_sl(lam_slSEXP);
    rcpp_result_gen = Rcpp::wrap(S_lambda(X_sl, lam_sl));
    return rcpp_result_gen;
END_RCPP
}
// P_Ome
arma::mat P_Ome(const arma::mat X_p, const arma::mat P_O);
RcppExport SEXP _softimpute_P_Ome(SEXP X_pSEXP, SEXP P_OSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat >::type X_p(X_pSEXP);
    Rcpp::traits::input_parameter< const arma::mat >::type P_O(P_OSEXP);
    rcpp_result_gen = Rcpp::wrap(P_Ome(X_p, P_O));
    return rcpp_result_gen;
END_RCPP
}
// softimpute
Rcpp::List softimpute(const arma::mat& X_miss, const arma::mat& P_si, const double& lambda);
RcppExport SEXP _softimpute_softimpute(SEXP X_missSEXP, SEXP P_siSEXP, SEXP lambdaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type X_miss(X_missSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type P_si(P_siSEXP);
    Rcpp::traits::input_parameter< const double& >::type lambda(lambdaSEXP);
    rcpp_result_gen = Rcpp::wrap(softimpute(X_miss, P_si, lambda));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_softimpute_cutoff", (DL_FUNC) &_softimpute_cutoff, 2},
    {"_softimpute_S_lambda", (DL_FUNC) &_softimpute_S_lambda, 2},
    {"_softimpute_P_Ome", (DL_FUNC) &_softimpute_P_Ome, 2},
    {"_softimpute_softimpute", (DL_FUNC) &_softimpute_softimpute, 3},
    {NULL, NULL, 0}
};

RcppExport void R_init_softimpute(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
